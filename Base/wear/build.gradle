// Main build script for Example
// 
// Usage: gradlew assembleDebug           Build debug APK
//        gradlew assembleRelease         Build release APK
//        gradlew test                    Run local unit test
//        gradlew connectedAndroidTest    Run instrumented unit test


final VERSION_MAJOR = 1 // max two digits
final VERSION_MINOR = 0 // max two digits
final VERSION_PATCH = 0 // max two digits
final VERSION_BUILD = 0 // max three digits


apply plugin: 'com.android.application'


dependencies
{
	compile 'com.google.android.support:wearable:1.3.0'
	compile 'com.google.android.gms:play-services-wearable:8.4.0'
	compile fileTree(dir: 'libs', include: ['*.jar'])
	compile project(':base')
}


android
{
	compileSdkVersion 23
	buildToolsVersion "23.0.3"

	defaultConfig
	{
		applicationId "com.example"
		minSdkVersion 20
		targetSdkVersion 23
		versionCode VERSION_MAJOR * 10000000 + VERSION_MINOR * 100000 + VERSION_PATCH * 1000 + VERSION_BUILD
		versionName "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
	}

	signingConfigs
	{
		release
		{
			// passwords and alias are obtained via askForPasswords task
			storeFile file("../${project.property('keystore.file')}")
			storePassword ""
			keyAlias ""
			keyPassword ""
		}
	}

	buildTypes
	{
		debug
		{
			buildConfigField "boolean", "LOGS", "true"
			buildConfigField "boolean", "DEV_ENVIRONMENT", "true"

			versionNameSuffix "-debug"
		}

		release
		{
			buildConfigField "boolean", "LOGS", "false"
			buildConfigField "boolean", "DEV_ENVIRONMENT", "false"

			signingConfig signingConfigs.release
			zipAlignEnabled true
			minifyEnabled false
			shrinkResources false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	compileOptions
	{
		sourceCompatibility JavaVersion.VERSION_1_7
		targetCompatibility JavaVersion.VERSION_1_7
	}

	dataBinding
	{
		enabled = true
	}

	applicationVariants.all
	{
		variant ->
			if(variant.buildType.name.equals("release"))
			{
				renameArtifact(variant)
			}
	}
}


def renameArtifact(variant)
{
	variant.outputs.each
	{
		output ->
			def date = new Date().format('yyyyMMdd')
			def fileName = "example-${project.name}-${variant.versionName}-${variant.versionCode}-${date}-${variant.name}.apk"
			output.outputFile = new File((String) output.outputFile.parent, fileName)
	}
}


task askForPasswords <<
{
	def storePass
	def keyAlias
	def keyPass

	def keystorePropertiesFile = new File((String) project.property("keystore.properties"))

	if(project.hasProperty("keystore.properties") && keystorePropertiesFile.exists())
	{
		println "Loading keystore passwords from property file..."
		Properties properties = new Properties()
		properties.load(new FileInputStream(keystorePropertiesFile))
		storePass = properties['keystore.store.password']
		keyAlias = properties['keystore.key.alias']
		keyPass = properties['keystore.key.password']
	}
	else
	{
		println "Getting keystore passwords from user input..."
		storePass = new String(System.console().readPassword("\nStore password: "))
		keyAlias = new String(System.console().readLine("Key alias: "))
		keyPass = new String(System.console().readPassword("Key password: "))
	}

	android.signingConfigs.release.storePassword = storePass
	android.signingConfigs.release.keyAlias = keyAlias
	android.signingConfigs.release.keyPassword = keyPass
}


tasks.whenTaskAdded
{
	theTask ->
		if(theTask.name.equals("packageRelease"))
		{
			theTask.dependsOn "askForPasswords"
		}
}
